{"logLevel":"debug","message":"multithreading is set to false"}
{"logLevel":"debug","message":"Using reflection to scan dependencies for gauge implementations..."}
SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0$4 (file:/Users/alper/.m2/repository/io/grpc/grpc-netty-shaded/1.72.0/grpc-netty-shaded-1.72.0.jar)
WARNING: Please consider reporting this to the maintainers of class io.grpc.netty.shaded.io.netty.util.internal.PlatformDependent0$4
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release
{"logLevel":"debug","message":"gauge-java took 277milliseconds to load and scan. This should be less than 'runner_connection_timeout' config value."}
{"logLevel":"debug","message":"run 'gauge config runner_connection_timeout' and verify that it is < 277"}
{"logLevel":"debug","message":"starting gRPC server..."}
{"logLevel":"debug","message":"started gRPC server on port 53493"}
{"logLevel":"info","message":"Listening on port:53493"}
{"logLevel":"debug","message":"Scanning packages for steps"}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.createTask' and 'taskloom.steps.StepImplementation.createTask'"}
{"logLevel":"debug","message":"Found Create task that {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.checkStatusCode' and 'taskloom.steps.StepImplementation.checkStatusCode'"}
{"logLevel":"debug","message":"Found Response status code should be {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.checkField' and 'taskloom.steps.StepImplementation.checkField'"}
{"logLevel":"debug","message":"Found Task {} should be {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.deleteTask' and 'taskloom.steps.StepImplementation.deleteTask'"}
{"logLevel":"debug","message":"Found Delete task by id {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.updateTask' and 'taskloom.steps.StepImplementation.updateTask'"}
{"logLevel":"debug","message":"Found Update task that {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.changeTaskStatusById' and 'taskloom.steps.StepImplementation.changeTaskStatusById'"}
{"logLevel":"debug","message":"Found Patch task by id {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.getAllTasks' and 'taskloom.steps.StepImplementation.getAllTasks'"}
{"logLevel":"debug","message":"Found Get all tasks in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.checkResponseType' and 'taskloom.steps.StepImplementation.checkResponseType'"}
{"logLevel":"debug","message":"Found Response type should be {} in current project scope."}
{"logLevel":"debug","message":"Comparing 'taskloom.steps.StepImplementation.getTaskById' and 'taskloom.steps.StepImplementation.getTaskById'"}
{"logLevel":"debug","message":"Found Get task by id {} in current project scope."}
{"logLevel":"debug","message":"Scanning packages for hooks"}
{"logLevel":"debug","message":"Scanned steps (using static parsing + reflections): "}
{"logLevel":"debug","message":"\tGet task by id {} : public void getTaskById(Integer id)"}
{"logLevel":"debug","message":"\tGet all tasks : public void getAllTasks()"}
{"logLevel":"debug","message":"\tResponse status code should be {} : public void checkStatusCode(Integer statusCode)"}
{"logLevel":"debug","message":"\tTask {} should be {} : public void checkField(String field, String value)"}
{"logLevel":"debug","message":"\tPatch task by id {} : public void changeTaskStatusById(Table table)"}
{"logLevel":"debug","message":"\tResponse type should be {} : public void checkResponseType(String type)"}
{"logLevel":"debug","message":"\tCreate task that {} : public void createTask(Table table)"}
{"logLevel":"debug","message":"\tUpdate task that {} : public void updateTask(Table table)"}
{"logLevel":"debug","message":"\tDelete task by id {} : public void deleteTask(Integer id)"}
{"logLevel":"debug","message":"Executing 'Update task that {}' using 'class taskloom.steps.StepImplementation.updateTask"}
Request method:	PUT
Request URI:	http://localhost:8080/tasks/1
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "title": "make calls",
    "description": "John, Alice",
    "status": "DONE"
}
HTTP/1.1 202 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:00 GMT
Keep-Alive: timeout=60
Connection: keep-alive

{
    "id": 1,
    "title": "make calls",
    "description": "John, Alice",
    "status": "DONE",
    "createdAt": "2025-09-04T13:42:41.254054Z",
    "updatedAt": "2025-09-04T14:03:00.087238Z"
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Update task that {}' using 'class taskloom.steps.StepImplementation.updateTask"}
Request method:	PUT
Request URI:	http://localhost:8080/tasks/1
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "title": "make calls",
    "description": "do",
    "status": "TODO"
}
HTTP/1.1 400 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:00 GMT
Connection: close

{
    "message": "Argument not valid.",
    "statusCode": 400
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Create task that {}' using 'class taskloom.steps.StepImplementation.createTask"}
Request method:	POST
Request URI:	http://localhost:8080/tasks
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "title": "grocery shopping",
    "description": "milk, tea, coffee",
    "status": "TODO"
}
HTTP/1.1 201 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:00 GMT
Keep-Alive: timeout=60
Connection: keep-alive

{
    "id": 19,
    "title": "grocery shopping",
    "description": "milk, tea, coffee",
    "status": "TODO",
    "createdAt": "2025-09-04T14:03:00.607737Z",
    "updatedAt": "2025-09-04T14:03:00.607737Z"
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Create task that {}' using 'class taskloom.steps.StepImplementation.createTask"}
Request method:	POST
Request URI:	http://localhost:8080/tasks
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "title": "homeworks",
    "description": "math, science, history",
    "status": null
}
HTTP/1.1 201 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:00 GMT
Keep-Alive: timeout=60
Connection: keep-alive

{
    "id": 20,
    "title": "homeworks",
    "description": "math, science, history",
    "status": "TODO",
    "createdAt": "2025-09-04T14:03:00.660113Z",
    "updatedAt": "2025-09-04T14:03:00.660113Z"
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Delete task by id {}' using 'class taskloom.steps.StepImplementation.deleteTask"}
Request method:	DELETE
Request URI:	http://localhost:8080/tasks/2
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
HTTP/1.1 204 
Date: Thu, 04 Sep 2025 14:03:00 GMT
Keep-Alive: timeout=60
Connection: keep-alive
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Get task by id {}' using 'class taskloom.steps.StepImplementation.getTaskById"}
Request method:	GET
Request URI:	http://localhost:8080/tasks/1
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
HTTP/1.1 200 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:00 GMT
Keep-Alive: timeout=60
Connection: keep-alive

{
    "id": 1,
    "title": "make calls",
    "description": "John, Alice",
    "status": "DONE",
    "createdAt": "2025-09-04T13:42:41.254054Z",
    "updatedAt": "2025-09-04T14:03:00.087238Z"
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Executing 'Get all tasks' using 'class taskloom.steps.StepImplementation.getAllTasks"}
Request method:	GET
Request URI:	http://localhost:8080/tasks
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
Cookies:		<none>
Multiparts:		<none>
Body:			<none>
HTTP/1.1 200 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:01 GMT
Keep-Alive: timeout=60
Connection: keep-alive

[
    {
        "id": 1,
        "title": "make calls",
        "description": "John, Alice",
        "status": "DONE",
        "createdAt": "2025-09-04T13:42:41.254054Z",
        "updatedAt": "2025-09-04T14:03:00.087238Z"
    },
    {
        "id": 3,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T13:53:41.474076Z",
        "updatedAt": "2025-09-04T13:53:41.474076Z"
    },
    {
        "id": 4,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T13:53:41.860003Z",
        "updatedAt": "2025-09-04T13:53:41.860003Z"
    },
    {
        "id": 5,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T13:58:15.380134Z",
        "updatedAt": "2025-09-04T13:58:15.380134Z"
    },
    {
        "id": 6,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T13:58:15.419906Z",
        "updatedAt": "2025-09-04T13:58:15.419906Z"
    },
    {
        "id": 7,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T13:59:38.411997Z",
        "updatedAt": "2025-09-04T13:59:38.411997Z"
    },
    {
        "id": 8,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T13:59:38.591093Z",
        "updatedAt": "2025-09-04T13:59:38.591093Z"
    },
    {
        "id": 9,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:00:35.854423Z",
        "updatedAt": "2025-09-04T14:00:35.854423Z"
    },
    {
        "id": 10,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:00:36.031943Z",
        "updatedAt": "2025-09-04T14:00:36.031943Z"
    },
    {
        "id": 11,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:29.544022Z",
        "updatedAt": "2025-09-04T14:01:29.544022Z"
    },
    {
        "id": 12,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:29.723280Z",
        "updatedAt": "2025-09-04T14:01:29.723280Z"
    },
    {
        "id": 13,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:37.158063Z",
        "updatedAt": "2025-09-04T14:01:37.158063Z"
    },
    {
        "id": 14,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:37.333980Z",
        "updatedAt": "2025-09-04T14:01:37.333980Z"
    },
    {
        "id": 15,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:52.492590Z",
        "updatedAt": "2025-09-04T14:01:52.492590Z"
    },
    {
        "id": 16,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:01:52.677713Z",
        "updatedAt": "2025-09-04T14:01:52.677713Z"
    },
    {
        "id": 17,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:02:53.684883Z",
        "updatedAt": "2025-09-04T14:02:53.684883Z"
    },
    {
        "id": 18,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:02:53.858830Z",
        "updatedAt": "2025-09-04T14:02:53.858830Z"
    },
    {
        "id": 19,
        "title": "grocery shopping",
        "description": "milk, tea, coffee",
        "status": "TODO",
        "createdAt": "2025-09-04T14:03:00.607737Z",
        "updatedAt": "2025-09-04T14:03:00.607737Z"
    },
    {
        "id": 20,
        "title": "homeworks",
        "description": "math, science, history",
        "status": "TODO",
        "createdAt": "2025-09-04T14:03:00.660113Z",
        "updatedAt": "2025-09-04T14:03:00.660113Z"
    }
]
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Patch task by id {}' using 'class taskloom.steps.StepImplementation.changeTaskStatusById"}
Request method:	PATCH
Request URI:	http://localhost:8080/tasks/1/status
Proxy:			<none>
Request params:	<none>
Query params:	<none>
Form params:	<none>
Path params:	<none>
Headers:		Accept=application/json
				Content-Type=application/json
Cookies:		<none>
Multiparts:		<none>
Body:
{
    "taskStatus": "DONE"
}
HTTP/1.1 202 
Content-Type: application/json
Transfer-Encoding: chunked
Date: Thu, 04 Sep 2025 14:03:01 GMT
Keep-Alive: timeout=60
Connection: keep-alive

{
    "id": 1,
    "title": "make calls",
    "description": "John, Alice",
    "status": "DONE",
    "createdAt": "2025-09-04T13:42:41.254054Z",
    "updatedAt": "2025-09-04T14:03:00.087238Z"
}
{"logLevel":"debug","message":"Executing 'Response status code should be {}' using 'class taskloom.steps.StepImplementation.checkStatusCode"}
{"logLevel":"debug","message":"Executing 'Response type should be {}' using 'class taskloom.steps.StepImplementation.checkResponseType"}
{"logLevel":"debug","message":"Executing 'Task {} should be {}' using 'class taskloom.steps.StepImplementation.checkField"}
{"logLevel":"debug","message":"Killing Java runner..."}
{"logLevel":"debug","message":"Stopping execution pool..."}
{"logLevel":"debug","message":"Shutting down grpc server..."}
{"logLevel":"debug","message":"Runner killed gracefully."}
